"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5802],{1401:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,quartoRawHtml:()=>c,toc:()=>d});var s=e(5893),o=e(1151);const i={custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_logging.ipynb",source_notebook:"/notebook/agentchat_logging.ipynb",title:"Runtime Logging with AutoGen"},a="Runtime Logging with AutoGen",r={id:"notebooks/agentchat_logging",title:"Runtime Logging with AutoGen",description:"Open In Colab",source:"@site/docs/notebooks/agentchat_logging.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_logging",permalink:"/autogen/docs/notebooks/agentchat_logging",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_logging.ipynb",tags:[],version:"current",frontMatter:{custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_logging.ipynb",source_notebook:"/notebook/agentchat_logging.ipynb",title:"Runtime Logging with AutoGen"},sidebar:"notebooksSidebar",previous:{title:"FSM - User can input speaker transition constraints",permalink:"/autogen/docs/notebooks/agentchat_groupchat_finite_state_machine"},next:{title:"Solving Multiple Tasks in a Sequence of Async Chats",permalink:"/autogen/docs/notebooks/agentchat_multi_task_async_chats"}},l={},d=[{value:"Getting Data from the SQLite Database",id:"getting-data-from-the-sqlite-database",level:2},{value:"Computing Cost",id:"computing-cost",level:2}],c=["<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n","\n</div>"];function g(t){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"runtime-logging-with-autogen",children:"Runtime Logging with AutoGen"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_logging.ipynb",children:(0,s.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_logging.ipynb",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,s.jsx)(n.p,{children:"AutoGen offers utilities to log data for debugging and performance\nanalysis. This notebook demonstrates how to use them."}),"\n",(0,s.jsxs)(n.p,{children:["In general, users can initiate logging by calling\n",(0,s.jsx)(n.code,{children:"autogen.runtime_logging.start()"})," and stop logging by calling\n",(0,s.jsx)(n.code,{children:"autogen.runtime_logging.stop()"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import json\nimport autogen\nfrom autogen import AssistantAgent, UserProxyAgent\nimport pandas as pd\n\n# Setup API key. Add your own API key to config file or environment variable\nllm_config = {\n    "config_list": autogen.config_list_from_json(\n        env_or_file="OAI_CONFIG_LIST",\n    ),\n    "temperature": 0.9,\n}\n\n# Start logging\nlogging_session_id = autogen.runtime_logging.start(config={"dbname": "logs.db"})\nprint("Logging session ID: " + str(logging_session_id))\n\n# Create an agent workflow and run it\nassistant = AssistantAgent(name="assistant", llm_config=llm_config)\nuser_proxy = UserProxyAgent(\n    name="user_proxy",\n    code_execution_config=False,\n    human_input_mode="NEVER",\n    is_termination_msg=lambda msg: "TERMINATE" in msg["content"],\n)\n\nuser_proxy.initiate_chat(\n    assistant, message="What is the height of the Eiffel Tower? Only respond with the answer and terminate"\n)\nautogen.runtime_logging.stop()\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Logging session ID: 6e08f3e0-392b-434e-8b69-4ab36c4fcf99\nuser_proxy (to assistant):\n\nWhat is the height of the Eiffel Tower? Only respond with the answer and terminate\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nThe height of the Eiffel Tower is approximately 330 meters.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,s.jsx)(n.h2,{id:"getting-data-from-the-sqlite-database",children:"Getting Data from the SQLite Database"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"logs.db"})," should be generated, by default it\u2019s using SQLite database.\nYou can view the data with GUI tool like ",(0,s.jsx)(n.code,{children:"sqlitebrowser"}),", using SQLite\ncommand line shell or using python script:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def get_log(dbname="logs.db", table="chat_completions"):\n    import sqlite3\n\n    con = sqlite3.connect(dbname)\n    query = f"SELECT * from {table}"\n    cursor = con.execute(query)\n    rows = cursor.fetchall()\n    column_names = [description[0] for description in cursor.description]\n    data = [dict(zip(column_names, row)) for row in rows]\n    con.close()\n    return data\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def str_to_dict(s):\n    return json.loads(s)\n\n\nlog_data = get_log()\nlog_data_df = pd.DataFrame(log_data)\n\nlog_data_df["total_tokens"] = log_data_df.apply(\n    lambda row: str_to_dict(row["response"])["usage"]["total_tokens"], axis=1\n)\n\nlog_data_df["request"] = log_data_df.apply(lambda row: str_to_dict(row["request"])["messages"][0]["content"], axis=1)\n\nlog_data_df["response"] = log_data_df.apply(\n    lambda row: str_to_dict(row["response"])["choices"][0]["message"]["content"], axis=1\n)\n\nlog_data_df\n'})}),"\n",(0,s.jsx)("div",{dangerouslySetInnerHTML:{__html:c[0]}}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"id"}),(0,s.jsx)(n.th,{children:"invocation_id"}),(0,s.jsx)(n.th,{children:"client_id"}),(0,s.jsx)(n.th,{children:"wrapper_id"}),(0,s.jsx)(n.th,{children:"session_id"}),(0,s.jsx)(n.th,{children:"request"}),(0,s.jsx)(n.th,{children:"response"}),(0,s.jsx)(n.th,{children:"is_cached"}),(0,s.jsx)(n.th,{children:"cost"}),(0,s.jsx)(n.th,{children:"start_time"}),(0,s.jsx)(n.th,{children:"end_time"}),(0,s.jsx)(n.th,{children:"total_tokens"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"e8bb00d7-6da5-4407-a949-e19b55d53da8"}),(0,s.jsx)(n.td,{children:"139819167322784"}),(0,s.jsx)(n.td,{children:"139823225568704"}),(0,s.jsx)(n.td,{children:"8821a150-8c78-4d05-a858-8a64f1d18648"}),(0,s.jsx)(n.td,{children:"You are a helpful AI assistant.\\nSolve tasks u..."}),(0,s.jsx)(n.td,{children:"The height of the Eiffel Tower is approximatel..."}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"0.01572"}),(0,s.jsx)(n.td,{children:"2024-02-13 15:06:22.082896"}),(0,s.jsx)(n.td,{children:"2024-02-13 15:06:22.083169"}),(0,s.jsx)(n.td,{children:"507"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"c8522790-0067-484b-bb37-d39ae80db98b"}),(0,s.jsx)(n.td,{children:"139823225568656"}),(0,s.jsx)(n.td,{children:"139823225563040"}),(0,s.jsx)(n.td,{children:"fb0ef547-a2ac-428b-8c20-a5e63263b8e1"}),(0,s.jsx)(n.td,{children:"You are a helpful AI assistant.\\nSolve tasks u..."}),(0,s.jsx)(n.td,{children:"The height of the Eiffel Tower is approximatel..."}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"0.01572"}),(0,s.jsx)(n.td,{children:"2024-02-13 15:06:23.498758"}),(0,s.jsx)(n.td,{children:"2024-02-13 15:06:23.499045"}),(0,s.jsx)(n.td,{children:"507"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"91c3f6c0-c6f7-4306-89cd-f304c9556de4"}),(0,s.jsx)(n.td,{children:"139823225449024"}),(0,s.jsx)(n.td,{children:"139819166072448"}),(0,s.jsx)(n.td,{children:"6e08f3e0-392b-434e-8b69-4ab36c4fcf99"}),(0,s.jsx)(n.td,{children:"You are a helpful AI assistant.\\nSolve tasks u..."}),(0,s.jsx)(n.td,{children:"The height of the Eiffel Tower is approximatel..."}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"0.01572"}),(0,s.jsx)(n.td,{children:"2024-02-13 15:06:24.688990"}),(0,s.jsx)(n.td,{children:"2024-02-13 15:06:24.689238"}),(0,s.jsx)(n.td,{children:"507"})]})]})]}),"\n",(0,s.jsx)("div",{dangerouslySetInnerHTML:{__html:c[1]}}),"\n",(0,s.jsx)(n.h2,{id:"computing-cost",children:"Computing Cost"}),"\n",(0,s.jsx)(n.p,{children:"One use case of logging data is to compute the cost of a session."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Sum totoal tokens for all sessions\ntotal_tokens = log_data_df["total_tokens"].sum()\n\n# Sum total cost for all sessions\ntotal_cost = log_data_df["cost"].sum()\n\n# Total tokens for specific session\nsession_tokens = log_data_df[log_data_df["session_id"] == logging_session_id]["total_tokens"].sum()\nsession_cost = log_data_df[log_data_df["session_id"] == logging_session_id]["cost"].sum()\n\nprint("Total tokens for all sessions: " + str(total_tokens) + ", total cost: " + str(round(total_cost, 4)))\nprint(\n    "Total tokens for session "\n    + str(logging_session_id)\n    + ": "\n    + str(session_tokens)\n    + ", cost: "\n    + str(round(session_cost, 4))\n)\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Total tokens for all sessions: 1521, total cost: 0.0472\nTotal tokens for session 6e08f3e0-392b-434e-8b69-4ab36c4fcf99: 507, cost: 0.0157\n"})})]})}function h(t={}){const{wrapper:n}={...(0,o.a)(),...t.components};return n?(0,s.jsx)(n,{...t,children:(0,s.jsx)(g,{...t})}):g(t)}},1151:(t,n,e)=>{e.d(n,{Z:()=>r,a:()=>a});var s=e(7294);const o={},i=s.createContext(o);function a(t){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function r(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:a(t.components),s.createElement(i.Provider,{value:n},t.children)}}}]);